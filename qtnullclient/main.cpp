//==============================================================================
//
// Filename: main.cpp
//
// File purpose: Designated main function called at program startup.
//
// Program description: This program is a proof of concept that
// implements the functionality of pidgin's nullclient.c program (which is a 
// a command-line program) in a Qt GUI application. The original nullclient.c
// program displays a list of available pidgin chat plugin protocols, prompts
// the user to select one of the protocols by menu number, prompts the user for
// username and password, and attempts to establish a connection. Upon a
// successful connection, a message indicating as much is displayed in the
// terminal's command line. This Qt rendition accomplishes the same basic
// functionality in the most minimalistic manner possible since it is intended
// to be only a proof of concept.
//
// Program environment: Linux (WSL)
//
// Program files:
//     - main.cpp: main function called at program startup.
//     - MainWindow.cpp: defines Qt MainWindow class.
//     - MainWindow.h: defines Qt MainWindow class member functions.
//     - nullclient.cpp: defines intermediary function(s) that receives user
//	         selection for plugin protocol and login credentials and uses
//           functions defined in qtlibpurple.cpp to establish connection.
//     - nullclient.h: function declarations that accompany nullclient.cpp.
//     - qtlibpurple.cpp: functions that make calls to libpurple functions.
//     - qtlibpurple.h: function declarations that accompany qtlibpurple.cpp.
//     - qtnullclient.pro: Qt project file that controls build of projects
//           and auto-generates Makefile and other helper files.
//     - ui_mainwindow.h: File generated by Qt Creator that defines user
//           interface.
//     - mainwindow.ui: another file presumably generated by QT Creator.
//     - defines.h: Needed definitions.
//
//     Other files that are auto-generated by Qt:
//         - qtnullclient.pro.user: Qt project file that was auto-generated by
//               Qt Creator IDE; it is unknown at present whether this file is
//               required.
//         - moc_MainWindow.cpp: generated from headers containing QObject
//               derived classes.
//         - moc_predefs.h: generated by QT Meta Object Compiler for all
//               QObject classes (and apparently are needed for signals, slots,
//               etc. to work).
//
// Approach:
//     - Succesfully build pidgin from repository files (which was the most
//           challenging task) and requires installing and configuring
//           multiple dependencies (e.g., XLaunch). More information on this
//           aspect will be furnished in an accompanying README file.
//     - Install Qt Creator IDE application.
//     - Create Qt application initially in Qt Creator and copy needed C++ code
//           files that were auto-generated by the IDE over to project folder.
//     - Re-write C language functions in original nullclient.c as C++ code
//           that can work in conjunction with Qt C++ functions.
//
// Testing: Comprised attempting to connect XMPP/Jabber instant messaging
// accounts to XMPP/Jabber plugin protocol. Successful connections were
// verified using the command line function from original nullclient.c program
// as well as observing availability in a Buddy account pidgin window (i.e.,
// from a second account that can observe whether a Buddy is connected).
//
// Additional documentation: A README file will be funished.
//
// Note:
//     - Comments from original pidgin programmers are denoted by prepending
//       "pidgin comments:" to the comment.
//
// Bugs/TODOs:
//     - Provide error checking (e.g., user fails to select a protocol from
//           menu)
//     - The list of pidgin plugin protocols are hard-coded in Qt Creator, as
//           opposed to retrieved from libpurple back-end as is the case in
//           the original nullclient.c program. This type of functionality
//           could be replicated in this instant Qt GUI program.
//     - Display appropriate message in status window for different results
//           other than a successful connection (e.g., error messages).
//     - Replace global function pointer (see code comments below) with
//           more suitable alternative.
//     - Add/expand/proof comments to code.
//
//==============================================================================

#include "qtnullclient.h"
#include "MainWindow.h"

// Declare global function pointer created to handle non-member libpurple
// function updating Qt MainWindow class member variable that keeps track of
// connection status (connectionStatusId) for purpose of obtaining connection
// status in Qt window. Other approaches should be investigated.
void (MainWindow::*function_ptr)(int);
MainWindow* p;


int main(int argc, char *argv[])
{
    // Main event loop of GLib or GTK+ application.  See
    // https://developer.gnome.org/glib/stable/glib-The-Main-Event-Loop.html
	GMainLoop *loop = g_main_loop_new(NULL, FALSE);


    // Initialize Qt window system and construct application object
    QApplication app(argc, argv);
	MainWindow *w = new MainWindow;
    w->show();

    // Assign global function pointer to handle non-member libpurple function
    // updating Qt Mainwindow class member that keeps track of connection
    // status (connectionStatusId). See comment further above.
    function_ptr = &MainWindow::setConnectionStatusId;
    p = w;

    return app.exec();

    g_main_loop_run(loop);	
}
