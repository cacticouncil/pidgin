/* talkatu.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Talkatu", gir_namespace = "Talkatu", gir_version = "0.0", lower_case_cprefix = "talkatu_")]
namespace Talkatu {
	[CCode (cheader_filename = "Talkatu-0.0.h", type_id = "talkatu_action_group_get_type ()")]
	public class ActionGroup : GLib.SimpleActionGroup, GLib.ActionGroup, GLib.ActionMap {
		[CCode (has_construct_function = false, type = "GSimpleActionGroup*")]
		public ActionGroup (Gtk.TextBuffer buffer);
		public void activate_format (string format_name);
		public void enable_action (string name);
		public bool get_action_activated (string name);
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] get_activated_formats ();
		public unowned Gtk.TextBuffer get_buffer ();
		public unowned Talkatu.Input get_input ();
		public void set_input (Talkatu.Input input);
		public Talkatu.Buffer buffer { get; construct; }
		public Talkatu.Input input { get; set construct; }
		public virtual signal void action_activated (GLib.Action action, string name);
	}
	[CCode (cheader_filename = "Talkatu-0.0.h", type_id = "talkatu_attachment_dialog_get_type ()")]
	public class AttachmentDialog : Gtk.Dialog, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public AttachmentDialog (Talkatu.Attachment attachment, string comment);
		public Talkatu.Attachment get_attachment ();
		public unowned string get_comment ();
		public GLib.Object attachment { owned get; construct; }
		public string comment { get; construct; }
	}
	[CCode (cheader_filename = "Talkatu-0.0.h", type_id = "talkatu_attachment_preview_get_type ()")]
	public class AttachmentPreview : Gtk.InfoBar, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public AttachmentPreview (Talkatu.Attachment attachment);
		public Talkatu.Attachment get_attachment ();
		public GLib.Object attachment { owned get; construct; }
	}
	[CCode (cheader_filename = "Talkatu-0.0.h", type_id = "talkatu_buffer_get_type ()")]
	public class Buffer : Gtk.TextBuffer {
		[CCode (has_construct_function = false, type = "GtkTextBuffer*")]
		public Buffer (GLib.SimpleActionGroup action_group);
		public void clear ();
		public unowned GLib.SimpleActionGroup get_action_group ();
		public bool get_is_empty ();
		public string get_plain_text ();
		public Talkatu.BufferStyle get_style ();
		public void insert_link (Gtk.TextIter pos, string display_text, string url);
		public virtual void insert_markup (Gtk.TextIter pos, string new_text, int new_text_length);
		public GLib.ActionGroup action_group { get; construct; }
		public Talkatu.BufferStyle style { get; construct; }
	}
	[CCode (cheader_filename = "Talkatu-0.0.h", type_id = "talkatu_editor_get_type ()")]
	public class Editor : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Editor ();
		public unowned Gtk.TextBuffer get_buffer ();
		public unowned Gtk.Widget get_input ();
		public bool get_send_button_visible ();
		public unowned Gtk.Widget get_toolbar ();
		public bool get_toolbar_visible ();
		public void set_buffer (Gtk.TextBuffer buffer);
		public void set_send_button_visible (bool visible);
		public void set_toolbar_visible (bool visible);
		public Gtk.TextBuffer buffer { get; set construct; }
		public Talkatu.View input { get; }
		[NoAccessorMethod]
		public bool show_send_button { get; set construct; }
		[NoAccessorMethod]
		public bool show_toolbar { get; set construct; }
		public Talkatu.Toolbar toolbar { get; }
	}
	[CCode (cheader_filename = "Talkatu-0.0.h", type_id = "talkatu_history_get_type ()")]
	public class History : Gtk.ListBox, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public History ();
		public void write_message (Talkatu.Message message);
	}
	[CCode (cheader_filename = "Talkatu-0.0.h", type_id = "talkatu_history_row_get_type ()")]
	public class HistoryRow : Gtk.ListBoxRow, Atk.Implementor, Gtk.Actionable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public HistoryRow (Talkatu.Message message);
		[NoAccessorMethod]
		public GLib.Object message { owned get; construct; }
	}
	[CCode (cheader_filename = "Talkatu-0.0.h", type_id = "talkatu_html_buffer_get_type ()")]
	public class HtmlBuffer : Talkatu.Buffer {
		[CCode (has_construct_function = false, type = "GtkTextBuffer*")]
		public HtmlBuffer ();
		public virtual void insert_html (Gtk.TextIter iter, string text, int len);
	}
	[CCode (cheader_filename = "Talkatu-0.0.h", type_id = "talkatu_html_pango_renderer_get_type ()")]
	public class HtmlPangoRenderer : Talkatu.HtmlRenderer {
		[CCode (has_construct_function = false, type = "TalkatuHtmlRenderer*")]
		public HtmlPangoRenderer ();
		public unowned string get_string ();
	}
	[CCode (cheader_filename = "Talkatu-0.0.h", type_id = "talkatu_html_renderer_get_type ()")]
	public abstract class HtmlRenderer : GLib.Object {
		[CCode (has_construct_function = false)]
		protected HtmlRenderer ();
		[NoWrapper]
		public virtual void comment (string comment);
		[NoWrapper]
		public virtual void element_finish (string name);
		[NoWrapper]
		public virtual void element_start (string name, string attribute_names, string attribute_values);
		public void render (string html);
		public virtual void reset ();
		[NoWrapper]
		public virtual void text (string text);
	}
	[CCode (cheader_filename = "Talkatu-0.0.h", type_id = "talkatu_input_get_type ()")]
	public class Input : Talkatu.View, Atk.Implementor, Gtk.Buildable, Gtk.Scrollable, Talkatu.Message {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Input ();
		public Talkatu.InputSendBinding get_send_binding ();
		public void set_send_binding (Talkatu.InputSendBinding bindings);
		public Talkatu.InputSendBinding send_binding { get; set construct; }
		[HasEmitter]
		public virtual signal void send_message ();
		public virtual signal void should_send_message (Talkatu.InputSendBinding binding);
	}
	[CCode (cheader_filename = "Talkatu-0.0.h", type_id = "talkatu_link_dialog_get_type ()")]
	public class LinkDialog : Gtk.Dialog, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public LinkDialog ();
		public string get_display_text ();
		public string get_url ();
	}
	[CCode (cheader_filename = "Talkatu-0.0.h", type_id = "talkatu_markdown_buffer_get_type ()")]
	public class MarkdownBuffer : Talkatu.Buffer {
		[CCode (has_construct_function = false, type = "GtkTextBuffer*")]
		public MarkdownBuffer ();
		public virtual void insert_markdown (Gtk.TextIter iter, string text, int len);
	}
	[CCode (cheader_filename = "Talkatu-0.0.h", type_id = "talkatu_menu_tool_button_get_type ()")]
	public class MenuToolButton : Gtk.ToolButton, Atk.Implementor, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkToolItem*")]
		public MenuToolButton (string label, string icon_name, Gtk.Widget menu);
		public Gtk.Widget get_menu ();
		public void set_menu (Gtk.Widget menu);
		public Gtk.Menu menu { owned get; set construct; }
	}
	[CCode (cheader_filename = "Talkatu-0.0.h", type_id = "talkatu_message_actions_get_type ()")]
	public class MessageActions : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public MessageActions (Talkatu.Message message);
		public unowned Talkatu.Message get_message ();
		public GLib.Object message { get; construct; }
	}
	[CCode (cheader_filename = "Talkatu-0.0.h", type_id = "talkatu_scrolled_window_get_type ()")]
	public class ScrolledWindow : Gtk.ScrolledWindow, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public ScrolledWindow (Gtk.Adjustment hadjustment, Gtk.Adjustment vadjustment);
		public void page_down ();
		public void page_up ();
	}
	[CCode (cheader_filename = "Talkatu-0.0.h", type_id = "talkatu_simple_attachment_get_type ()")]
	public class SimpleAttachment : GLib.Object, Talkatu.Attachment {
		[CCode (has_construct_function = false)]
		protected SimpleAttachment ();
		public static Talkatu.Attachment @new (uint64 id, string content_type);
	}
	[CCode (cheader_filename = "Talkatu-0.0.h", type_id = "talkatu_tag_get_type ()")]
	public class Tag : Gtk.TextTag {
		[CCode (has_construct_function = false)]
		protected Tag ();
		public Talkatu.TagDisplay get_display ();
		public static unowned string name_for_action_name (string action_name);
		public static unowned string name_to_html (string tag_name);
		public void set_display (Talkatu.TagDisplay display);
		public Talkatu.TagDisplay display { get; set construct; }
	}
	[CCode (cheader_filename = "Talkatu-0.0.h", type_id = "talkatu_tag_table_get_type ()")]
	public class TagTable : Gtk.TextTagTable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkTextTagTable*")]
		public TagTable ();
	}
	[CCode (cheader_filename = "Talkatu-0.0.h", type_id = "talkatu_tool_drawer_get_type ()")]
	public class ToolDrawer : Gtk.ToolItem, Atk.Implementor, Gtk.Activatable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkToolItem*")]
		public ToolDrawer (string label, string icon_name);
		public void add_item (GLib.Action action, string markup, string icon_name, string tooltip, GLib.Callback callback);
		public void add_separator ();
		public bool get_expanded ();
		public unowned string get_icon_name ();
		public unowned string get_label ();
		public void set_expanded (bool expanded);
		public void set_icon_name (string icon_name);
		public void set_label (string label);
		public bool expanded { get; set construct; }
		public string icon_name { get; construct; }
		public string label { get; construct; }
	}
	[CCode (cheader_filename = "Talkatu-0.0.h", type_id = "talkatu_toolbar_get_type ()")]
	public class Toolbar : Gtk.Toolbar, Atk.Implementor, Gtk.Buildable, Gtk.Orientable, Gtk.ToolShell {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public Toolbar ();
	}
	[CCode (cheader_filename = "Talkatu-0.0.h", type_id = "talkatu_typing_label_get_type ()")]
	public class TypingLabel : Gtk.Label, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public TypingLabel ();
		public void finish_typing (string who);
		public void start_typing (string who);
		public signal void changed (void* arg1);
	}
	[CCode (cheader_filename = "Talkatu-0.0.h", type_id = "talkatu_view_get_type ()")]
	public class View : Gtk.TextView, Atk.Implementor, Gtk.Buildable, Gtk.Scrollable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public View ();
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public View.with_buffer (Gtk.TextBuffer buffer);
		public virtual signal void format_activate (string action_name);
		public virtual signal void open_url (string url);
	}
	[CCode (cheader_filename = "Talkatu-0.0.h", type_id = "talkatu_whole_buffer_get_type ()")]
	public class WholeBuffer : Talkatu.Buffer {
		[CCode (has_construct_function = false, type = "GtkTextBuffer*")]
		public WholeBuffer ();
	}
	[CCode (cheader_filename = "Talkatu-0.0.h", type_cname = "TalkatuAttachmentInterface", type_id = "talkatu_attachment_get_type ()")]
	public interface Attachment : GLib.Object {
		public string get_content_type ();
		public string get_filename ();
		public abstract uint64 get_hash_key ();
		public uint64 get_id ();
		public string get_local_uri ();
		public GLib.Icon get_preview ();
		public string? get_remote_uri ();
		public uint64 get_size ();
		public void set_id (uint64 id);
		public void set_local_uri (string local_uri);
		public void set_remote_uri (string remote_uri);
		public void set_size (uint64 size);
		[ConcreteAccessor]
		public abstract string content_type { owned get; construct; }
		[ConcreteAccessor]
		public abstract uint64 id { get; set construct; }
		[ConcreteAccessor]
		public abstract string local_uri { owned get; set construct; }
		[ConcreteAccessor]
		public abstract string remote_uri { owned get; set construct; }
		[ConcreteAccessor]
		public abstract uint64 size { get; set construct; }
	}
	[CCode (cheader_filename = "Talkatu-0.0.h", type_cname = "TalkatuMessageInterface", type_id = "talkatu_message_get_type ()")]
	public interface Message : GLib.Object {
		public abstract bool add_attachment (Talkatu.Attachment attachment);
		public abstract void clear_attachments ();
		public abstract void foreach_attachment (Talkatu.AttachmentForeachFunc func);
		public abstract Talkatu.Attachment get_attachment (uint64 id);
		public string get_author ();
		public Gdk.RGBA? get_author_name_color ();
		public Talkatu.ContentType get_content_type ();
		public string get_contents ();
		public bool get_edited ();
		public string get_id ();
		public GLib.DateTime? get_timestamp ();
		public abstract bool remove_attachment (uint64 id);
		public void set_author (string author);
		public void set_author_name_color (Gdk.RGBA color);
		public void set_content_type (Talkatu.ContentType content_type);
		public void set_contents (string contents);
		public void set_edited (bool edited);
		public void set_id (string id);
		public void set_timestamp (GLib.DateTime? timestamp);
		[ConcreteAccessor]
		public abstract string author { owned get; set construct; }
		[ConcreteAccessor]
		public abstract Gdk.RGBA author_name_color { owned get; set construct; }
		[ConcreteAccessor]
		public abstract Talkatu.ContentType content_type { get; construct; }
		[ConcreteAccessor]
		public abstract string contents { owned get; set construct; }
		[ConcreteAccessor]
		public abstract bool edited { get; set construct; }
		[ConcreteAccessor]
		public abstract string id { owned get; set construct; }
		[ConcreteAccessor]
		public abstract GLib.DateTime timestamp { owned get; construct; }
	}
	[CCode (cheader_filename = "Talkatu-0.0.h", cprefix = "TALKATU_BUFFER_STYLE_", type_id = "talkatu_buffer_style_get_type ()")]
	public enum BufferStyle {
		RICH,
		WHOLE
	}
	[CCode (cheader_filename = "Talkatu-0.0.h", cprefix = "TALKATU_CONTENT_TYPE_", type_id = "talkatu_content_type_get_type ()")]
	public enum ContentType {
		PLAIN,
		PANGO,
		HTML,
		MARKDOWN
	}
	[CCode (cheader_filename = "Talkatu-0.0.h", cprefix = "TALKATU_INPUT_SEND_BINDING_", type_id = "talkatu_input_send_binding_get_type ()")]
	[Flags]
	public enum InputSendBinding {
		RETURN,
		KP_ENTER,
		SHIFT_RETURN,
		CONTROL_RETURN
	}
	[CCode (cheader_filename = "Talkatu-0.0.h", cprefix = "TALKATU_TAG_DISPLAY_", type_id = "talkatu_tag_display_get_type ()")]
	public enum TagDisplay {
		INLINE,
		BLOCK
	}
	[CCode (cheader_filename = "Talkatu-0.0.h", has_target = false)]
	public delegate void AttachmentForeachFunc (Talkatu.Attachment attachment, void* data);
	[CCode (cheader_filename = "Talkatu-0.0.h", cname = "TALKATU_ACTION_ATTACH_FILE")]
	public const string ACTION_ATTACH_FILE;
	[CCode (cheader_filename = "Talkatu-0.0.h", cname = "TALKATU_ACTION_FORMAT_BOLD")]
	public const string ACTION_FORMAT_BOLD;
	[CCode (cheader_filename = "Talkatu-0.0.h", cname = "TALKATU_ACTION_FORMAT_GROW")]
	public const string ACTION_FORMAT_GROW;
	[CCode (cheader_filename = "Talkatu-0.0.h", cname = "TALKATU_ACTION_FORMAT_ITALIC")]
	public const string ACTION_FORMAT_ITALIC;
	[CCode (cheader_filename = "Talkatu-0.0.h", cname = "TALKATU_ACTION_FORMAT_RESET")]
	public const string ACTION_FORMAT_RESET;
	[CCode (cheader_filename = "Talkatu-0.0.h", cname = "TALKATU_ACTION_FORMAT_SHRINK")]
	public const string ACTION_FORMAT_SHRINK;
	[CCode (cheader_filename = "Talkatu-0.0.h", cname = "TALKATU_ACTION_FORMAT_STRIKETHROUGH")]
	public const string ACTION_FORMAT_STRIKETHROUGH;
	[CCode (cheader_filename = "Talkatu-0.0.h", cname = "TALKATU_ACTION_FORMAT_UNDERLINE")]
	public const string ACTION_FORMAT_UNDERLINE;
	[CCode (cheader_filename = "Talkatu-0.0.h", cname = "TALKATU_ACTION_INSERT_LINK")]
	public const string ACTION_INSERT_LINK;
	[CCode (cheader_filename = "Talkatu-0.0.h", cname = "TALKATU_BUFFER_LINK_TARGET_ATTRIBUTE")]
	public const string BUFFER_LINK_TARGET_ATTRIBUTE;
	[CCode (cheader_filename = "Talkatu-0.0.h", cname = "TALKATU_EXTRA_VERSION")]
	public const string EXTRA_VERSION;
	[CCode (cheader_filename = "Talkatu-0.0.h", cname = "TALKATU_MAJOR_VERSION")]
	public const int MAJOR_VERSION;
	[CCode (cheader_filename = "Talkatu-0.0.h", cname = "TALKATU_MICRO_VERSION")]
	public const int MICRO_VERSION;
	[CCode (cheader_filename = "Talkatu-0.0.h", cname = "TALKATU_MINOR_VERSION")]
	public const int MINOR_VERSION;
	[CCode (cheader_filename = "Talkatu-0.0.h", cname = "TALKATU_TAG_FORMATTING_END")]
	public const string TAG_FORMATTING_END;
	[CCode (cheader_filename = "Talkatu-0.0.h", cname = "TALKATU_TAG_FORMATTING_START")]
	public const string TAG_FORMATTING_START;
	[CCode (cheader_filename = "Talkatu-0.0.h", cname = "TALKATU_TAG_PREFIX")]
	public const string TAG_PREFIX;
	[CCode (cheader_filename = "Talkatu-0.0.h", cname = "TALKATU_TAG_PREFIX_LEN")]
	public const int TAG_PREFIX_LEN;
	[CCode (cheader_filename = "Talkatu-0.0.h", cname = "TALKATU_VERSION")]
	public const string VERSION;
	[CCode (cheader_filename = "Talkatu-0.0.h")]
	public static unowned string action_name_for_tag_name (string tag_name);
	[CCode (cheader_filename = "Talkatu-0.0.h")]
	public static string codeset_coerce_utf8 (uint8 data, size_t length, size_t text_length) throws GLib.Error;
	[CCode (cheader_filename = "Talkatu-0.0.h")]
	public static void init ();
	[CCode (cheader_filename = "Talkatu-0.0.h")]
	public static void markup_append_html (Talkatu.Buffer buffer, string text, int len);
	[CCode (cheader_filename = "Talkatu-0.0.h")]
	public static bool markup_deserialize_html (Gtk.TextBuffer register_buffer, Gtk.TextBuffer content_buffer, Gtk.TextIter iter, uint8 data, size_t length, bool create_tags, void* user_data) throws GLib.Error;
	[CCode (cheader_filename = "Talkatu-0.0.h")]
	public static string markup_get_html (Gtk.TextBuffer buffer, size_t len);
	[CCode (cheader_filename = "Talkatu-0.0.h")]
	public static string markup_get_html_range (Gtk.TextBuffer buffer, Gtk.TextIter start, Gtk.TextIter end, size_t len);
	[CCode (cheader_filename = "Talkatu-0.0.h")]
	public static void markup_insert_html (Talkatu.Buffer buffer, Gtk.TextIter iter, string text, int len);
	[CCode (cheader_filename = "Talkatu-0.0.h")]
	public static uint8 markup_serialize_html (Gtk.TextBuffer register_buffer, Gtk.TextBuffer content_buffer, Gtk.TextIter start, Gtk.TextIter end, size_t length, void* user_data);
	[CCode (cheader_filename = "Talkatu-0.0.h")]
	public static void markup_set_html (Talkatu.Buffer buffer, string text, int len);
	[CCode (cheader_filename = "Talkatu-0.0.h")]
	public static void uninit ();
}
